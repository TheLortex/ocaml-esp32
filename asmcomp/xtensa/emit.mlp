#2 "asmcomp/xtensa/emit.mlp"

open Arch
open Cmm
open Mach
open Linearize
open Emitaux
open Reg
open Proc
open Misc

(* Emission of Xtensa LX6 assembly code *)

type literal = 
  | Double of (int32 * int32) 
  | Single of int32

let stack_offset = ref 0

let frame_size () =
  let sz =
    !stack_offset + (* Outgoing arguments *)
    num_stack_slots.(0) * 4 + (* Local integers *)
    (if !contains_calls then 4 else 0) (* Return address in case of call. *)
  in Misc.align sz 8

let function_name = ref ""
let pending_literals = ref []
let pending_strings = ref []
(* Entry point for tail recursive calls *)
let tailrec_entry_point = ref 0

let emit_label lbl =
  emit_string ".LC"; emit_int lbl

let emit_symbol s = Emitaux.emit_symbol '$' s 

let emit_reg = function 
  | {loc = Reg r} -> emit_string (register_name r)
  | _ -> fatal_error "Emit_xtensa.emit_reg"

let emit_int_const dst i = 
  let n = new_label () in
  pending_literals := (n, Single i) :: !pending_literals;
  `	l32r	{emit_reg dst}, {emit_label n}\n`

let emit_float_const dst_hi dst_lo f = 
  let n = new_label () 
  and high_bits = Int64.to_int32 (Int64.shift_right_logical f 32)
  and low_bits = Int64.to_int32 f in 
  pending_literals := (n, Double (low_bits, high_bits)) :: !pending_literals;
  `	l32r	{emit_reg dst_lo}, {emit_label n}\n`;
  `	l32r	{emit_reg dst_hi}, {emit_label n}+4\n`

(* Call to C using CALL8 ABI - a8 is destroyed *)
let emit_call_to_C s =
  let veneer = new_label () in 
  `.literal	{emit_label veneer}, {emit_symbol s}\n`;
  `	l32r	a8, {emit_label veneer}\n`;
  `	callx8	a8\n`

(* Call to C using CALL0 ABI - a8 is destroyed *)
let emit_call_to_OCaml s =
  let veneer = new_label () in 
  `.literal	{emit_label veneer}, {emit_symbol s}\n`;
  `	l32r	a8, {emit_label veneer}\n`;
  `	callx0	a8\n`

let emit_addressing_mode = function 
  | Iindexed ofs when ofs < 0 -> `e`
  | _ -> `i`

(* Addressing relative to a register. Can only be positive *)
let emit_addressing addr r n = 
  match addr with
    Iindexed ofs ->
      `{emit_reg r.(n)}, {emit_int ofs}`

(* Position relative to stack pointer.
 * The stack frame is the following: 
 *  _______________________
 *  | Arguments (Incoming) |
 *   ---------------------- <- sp + !stack_offset + 4 * num_stack_slots.(0) + 4 if !contains_calls
 *  |   Local Variables    | |
 *   ---------------------- <- sp + !stack_offset
 *  | Arguments (Outgoing) | |
 *   ---------------------- <- sp
 *
 *)
let slot_offset loc _cl =
  let res = match loc with
    Incoming n ->
      assert (n >= 0);
      frame_size() + n
  | Local n -> 
      assert (n >= 0);
      !stack_offset + n * 4
  | Outgoing n ->
      assert (n >= 0);
      n
  in 
  res


(* Record live pointers at call points *)

let record_frame_label ?label live raise_ dbg =
  let lbl =
    match label with
    | None -> new_label ()
    | Some label -> label
  in
  let live_offset = ref [] in
  Reg.Set.iter
    (function
      | {typ = Val; loc = Reg r} ->(* Pointer in register: 2n+1 encoding of register index*)
          live_offset := ((r lsl 1) + 1) :: !live_offset
      | {typ = Val; loc = Stack s} as reg -> (* Pointer on stack: give stack offset *)
          live_offset := slot_offset s (register_class reg) :: !live_offset
      | {typ = Addr} as r ->
          Misc.fatal_error ("bad GC root " ^ Reg.name r)
      | _ -> ())
    live;
  record_frame_descr ~label:lbl ~frame_size:(frame_size())
    ~live_offset:!live_offset ~raise_frame:raise_ dbg;
  lbl

let record_frame ?label live raise_ dbg =
  let lbl = record_frame_label ?label live raise_ dbg in `{emit_label lbl}:`


type gc_call =
  { gc_lbl: label;                      (* Entry label *)
    gc_return_lbl: label;               (* Where to branch after GC *)
    gc_frame_lbl: label }               (* Label of frame descriptor *)

let call_gc_sites = ref ([] : gc_call list)

let emit_call_gc gc =
  `{emit_label gc.gc_lbl}:	{emit_call_to_OCaml "caml_call_gc"}\n`;
  `{emit_label gc.gc_frame_lbl}:	j	{emit_label gc.gc_return_lbl}\n`

(* Record calls to caml_ml_array_bound_error.
   In debug mode, we maintain one call to caml_ml_array_bound_error
   per bound check site. Otherwise, we can share a single call. *)

type bound_error_call =
  { bd_lbl: label;                    (* Entry label *)
    bd_frame_lbl: label }             (* Label of frame descriptor *)

let bound_error_sites = ref ([] : bound_error_call list)

let bound_error_label ?label dbg =
  if !Clflags.debug || !bound_error_sites = [] then begin
    let lbl_bound_error = new_label() in
    let lbl_frame = record_frame_label ?label Reg.Set.empty false dbg in
    bound_error_sites :=
      { bd_lbl = lbl_bound_error;
        bd_frame_lbl = lbl_frame } :: !bound_error_sites;
    lbl_bound_error
  end else begin
    let bd = List.hd !bound_error_sites in bd.bd_lbl
  end

let emit_call_bound_error bd =
  `{emit_label bd.bd_lbl}:	{emit_call_to_OCaml "caml_ml_array_bound_error"}\n`;
  `{emit_label bd.bd_frame_lbl}:\n`

let flush_strings () = 
  `.section .rodata\n`;
  let rec write_str = function 
    | [] -> ()
    | (label, value) :: next -> 
    begin
      `.align 4\n`;
      `{emit_label label}:\n`;
      `	.string	`; emit_string "\""; emit_string value; emit_string "\"";`\n`;
      write_str next
    end 
  in 
  write_str !pending_strings;
  pending_strings := []

let emit_load_symbol register symbol = 
  let n = new_label () in
  `.literal	{emit_label n}, {emit_string symbol}\n`;
  `	l32r	{emit_reg register}, {emit_label n}\n`

(* Actually, no need to flush them at once as the assembler can do it itself..*)
let flush_literals () = 
  `.text\n`;
  let rec write_literal = function 
    | [] -> ()
    | (label, item) :: next -> 
    begin
      `.literal	{emit_label label}, `;
      begin match item with 
        | Single i -> emit_int32 i 
        | Double (i1, i2) -> emit_int32 i1; `, `; emit_int32 i2
      end;
      `\n`;
      write_literal next;
    end 
  in 
  write_literal !pending_literals;
  pending_literals := []

type comparison_op = Cmp of string | CmpOr of (string * string) | CmpNor of (string * string)

let generate_comparison_op = function 
| Isigned Ceq ->    Cmp ("beq" ) | Isigned Cne ->    Cmp ("bne" ) | Isigned Cle -> CmpOr("blt","beq")
| Isigned Cge ->    Cmp ("bge" ) | Isigned Clt ->    Cmp ("blt" ) | Isigned Cgt -> CmpNor("blt","beq")
| Iunsigned Ceq ->  Cmp ("beq" ) | Iunsigned Cne ->  Cmp ("bne" ) | Iunsigned Cle -> CmpOr("bltu","beq")
| Iunsigned Cge ->  Cmp ("bgeu") | Iunsigned Clt ->  Cmp ("bltu") | Iunsigned Cgt -> CmpNor("bltu","beq")

let emit_comment _str = ``
  (*` #{emit_string str}\n`*)


type imm_reg = Immediate of int | Register of Reg.t

(*
 * Emits a long range conditional which will jump on label_then is r1 cmp_type r2 is true. 
 * If label_else is None the flow continues normally if the condition is not verified. 
 *)
let emit_if_then_else cmp_type r1 r2 label_then label_else = 
  let cmp_suffix = 
    match r2 with
    | Immediate _ -> "i"
    | Register _ -> ""
  in 
  let emit_r2 () =
    match r2 with 
    | Immediate n -> emit_int n 
    | Register r -> emit_reg r 
  in 
  let label_goto_then = new_label ()
  in
  let label_goto_else = new_label ()
  in
  begin 
    match cmp_type with 
    | Cmp op -> 
      `	{emit_string (op^cmp_suffix)} 	{emit_reg r1}, {emit_r2 ()}, {emit_label label_goto_then} \n`;
      `	j	{emit_label label_goto_else}\n`
    | CmpNor (op1, op2) -> 
      `	{emit_string (op1^cmp_suffix)} 	{emit_reg r1}, {emit_r2 ()}, {emit_label label_goto_else} \n`;
      `	{emit_string (op2^cmp_suffix)} 	{emit_reg r1}, {emit_r2 ()}, {emit_label label_goto_else} \n`;
      `	j	{emit_label label_then}\n`
    | CmpOr (op1, op2) -> 
      `	{emit_string (op1^cmp_suffix)} 	{emit_reg r1}, {emit_r2 ()}, {emit_label label_goto_then} \n`;
      `	{emit_string (op2^cmp_suffix)} 	{emit_reg r1}, {emit_r2 ()}, {emit_label label_goto_then} \n`;
      `	j {emit_label label_goto_else}\n`
  end;
  `{emit_label label_goto_then}:\n`;
  `	j	{emit_label label_then}\n`;
  `{emit_label label_goto_else}:\n`;
  match label_else with 
  | None -> ``
  | Some lbl -> `	j	{emit_label lbl}\n`

let name_for_int_operation = function 
  | Iadd  -> "add", false
  | Isub  -> "sub", false
  | Idiv  -> "quos", false 
  | Imod  -> "rems", false
  | Imul  -> "mull", false
  | Imulh -> "mulsh", false
  | Iand  -> "and", false
  | Ior   -> "or", false
  | Ixor  -> "xor", false
  | Ilsl  -> "sll", true
  | Ilsr  -> "srl", true
  | Iasr  -> "sra", true
  | _ -> assert false

let emit_fill_shift_register reg = 
  `	wsr	{emit_reg reg}, 3\n`


    
let emit_stack r = 
  match r.loc with  
  | Stack s -> 
    let ofs = slot_offset s (register_class r) in 
    assert (ofs >= 0);
    `sp, {emit_int ofs}`
  | _ -> fatal_error "Emit_xtensa.emit_stack"

let emit_stack_adjustment n =
  if n = 0 then () else begin
    `	addi	sp, sp, {emit_int n}\n`;
  end


let output_epilogue f =
  let n = frame_size() in
  if n > 0 then begin
    emit_stack_adjustment n;
    f ();
    (* reset CFA back cause function body may continue *)
    cfi_adjust_cfa_offset n
  end else
    f ()




let emit_instruction i = 
  emit_debug_info i.dbg;
  match i.desc with 
    | Lend -> 
      emit_comment "End";
    | Lop(Imove | Ispill | Ireload) -> 
      emit_comment "Move | Spill | Reload";
      assert (Array.length i.res >= 1);
      assert (Array.length i.arg >= 1);
      begin
        let src = i.arg.(0) and dst = i.res.(0) in
        if src.loc = dst.loc then () else begin 
          match (src.loc, dst.loc) with 
          | Reg _, Reg _ -> 
              `	mov 	{emit_reg dst}, {emit_reg src}\n`
          | Reg _, Stack _ -> 
              `	s32i	{emit_reg src}, {emit_stack dst}\n`
          | Stack _, Reg _ -> 
              `	l32i	{emit_reg dst}, {emit_stack src}\n`
          | _, _ -> assert false
        end
      end
    | Lop(Iconst_int n) -> 
      emit_comment "Const int";
      assert (Array.length i.res >= 1);
      let n = Nativeint.to_int32 n in 
      emit_int_const i.res.(0) n 
    | Lop(Iconst_float f) -> 
      emit_comment "Const float";
      assert (Array.length i.res >= 2); 
      emit_float_const i.res.(0) i.res.(1) f
    | Lop(Iconst_symbol s) -> (* String emission *)
      emit_comment "Const symbol";
      assert (Array.length i.res >= 1);
      emit_load_symbol i.res.(0) s
    | Lop(Icall_ind {label_after;}) -> 
      emit_comment "Call_ind";
      assert (Array.length i.arg >= 1);
      `	callx0	{emit_reg i.arg.(0)}\n`;
      `{record_frame i.live false i.dbg ~label:label_after}\n`; 

    | Lop(Icall_imm { func; label_after; }) -> 
      emit_comment "Call imm";
      emit_call_to_OCaml func;
      `{record_frame i.live false i.dbg ~label:label_after}\n`;
    | Lop(Itailcall_ind { label_after = _; }) -> 
      emit_comment "Tailcall_ind";
      output_epilogue begin fun () ->
        if !contains_calls then
          ( `	addi	a0, sp, -4\n`; (* TODO: check this out*)
            `	l32i	a0, a0, 0\n`);
        `	jx  	{emit_reg i.arg.(0)}\n`
      end
    | Lop(Itailcall_imm { func; label_after = _;}) ->
      emit_comment "Tailcall_imm"; 
      if func = !function_name then begin
        `	j   	{emit_label !tailrec_entry_point}\n`
      end else begin
        output_epilogue begin fun () ->
          if !contains_calls then
            (`	addi	a0, sp, -4\n`; (* TODO: check this out*)
             `	l32i	a0, a0, 0\n`);
          `	j   	{emit_symbol func}\n`
        end
      end
      
    | Lop(Iextcall { func; alloc = false;}) -> 
      emit_comment "Extcall";
      `	{emit_call_to_C func}\n`
    | Lop(Iextcall { func; alloc = true; label_after; }) -> 
      emit_comment "Extcall alloc";
      emit_load_symbol (phys_reg 7 (* a9 *)) func;
      `	{emit_call_to_OCaml "caml_c_call"}\n`;
      `{record_frame i.live false i.dbg ~label:label_after}\n`
    | Lop(Istackoffset n) -> 
      emit_comment "Stackoffset";
      begin
        assert (n mod 8 = 0);
        emit_stack_adjustment (-n);
        stack_offset := !stack_offset + n;
      end
    | Lop(Iload((Double | Double_u), addr)) -> 
      emit_comment "Load double";
      assert (Array.length i.res >= 2);
      assert (Array.length i.arg >= 1);
      let addr' = offset_addressing addr 4 in
      begin
        `	l32{emit_addressing_mode addr}	{emit_reg i.res.(0)}, {emit_addressing addr i.arg 0}\n`;
        `	l32{emit_addressing_mode addr'}	{emit_reg i.res.(1)}, {emit_addressing addr' i.arg 0}\n`
      end
    | Lop(Iload(size, addr)) -> 
      emit_comment "Load";
      assert (Array.length i.res >= 1);
      assert (Array.length i.arg >= 1);
      let r = i.res.(0) in
        let instr =
          match size with
            Byte_unsigned -> "l8u"
          | Byte_signed -> assert false
          | Sixteen_unsigned -> "l16u"
          | Sixteen_signed -> "l16s"
          | _ (* 32-bit quantities *) -> "l32" in
        `	{emit_string instr}{emit_addressing_mode addr}	{emit_reg r}, {emit_addressing addr i.arg 0}\n`;
    | Lop(Istore((Double | Double_u), addr, _)) -> 
      emit_comment "Store double";
      assert (Array.length i.arg >= 3);
      let addr' = offset_addressing addr 4 in
      begin
        `	s32{emit_addressing_mode addr}	{emit_reg i.arg.(0)}, {emit_addressing addr i.arg 2}\n`;
        `	s32{emit_addressing_mode addr'}	{emit_reg i.arg.(1)}, {emit_addressing addr' i.arg 2}\n`
      end
    | Lop(Istore(size, addr, _)) -> 
      emit_comment "Store";
      let r = i.arg.(0) in
      let instr =
        match size with
          Byte_unsigned -> "s8"
        | Byte_signed -> "s8"
        | Sixteen_unsigned -> "s16"
        | Sixteen_signed -> "s16"
        | _ (* 32-bit quantities *) -> "s32" in
      `	{emit_string instr}{emit_addressing_mode addr}	{emit_reg r}, {emit_addressing addr i.arg 1}\n`;
    | Lop(Ialloc { words = n; label_after_call_gc; }) ->
      emit_comment "Alloc";
      let lbl_frame = 
        record_frame_label i.live false i.dbg ?label:label_after_call_gc
      in 
      begin match n with
        8 ->  `{emit_call_to_OCaml "caml_alloc1"}\n`
      | 12 -> `{emit_call_to_OCaml "caml_alloc2"}\n`
      | 16 -> `{emit_call_to_OCaml "caml_alloc3"}\n`
      |  _ -> emit_int_const (phys_reg 0) (Int32.of_int n);
              `{emit_call_to_OCaml "caml_allocN"}\n`
      end;
      `{emit_label lbl_frame}: \n`;
      `	rfr 	{emit_reg i.res.(0)}, f1\n`;
      `	addi	{emit_reg i.res.(0)},{emit_reg i.res.(0)},4\n`
    | Lop(Iintop(Icomp cmp)) -> 
      emit_comment "Comparison";
      assert (Array.length i.arg >= 2);
      assert (Array.length i.res >= 1);
      let label_1 = new_label () and label_0 = new_label () and label_end = new_label () in
      let cmp = generate_comparison_op cmp in
      emit_if_then_else cmp i.arg.(0) (Register i.arg.(1)) label_1 (Some label_0);
      `{emit_label label_0}:\n`;
      `	movi	{emit_reg i.res.(0)}, 0\n`;
      `	j	{emit_label label_end}\n`;
      `{emit_label label_1}:\n`;
      `	movi	{emit_reg i.res.(0)}, 1\n`;
      `{emit_label label_end}:\n`;
    | Lop(Iintop_imm(Icomp cmp, n)) -> 
      emit_comment "Comparison_imm";
      assert (Array.length i.res >= 1);
      assert (Array.length i.arg >= 2);
      let label_1 = new_label () and label_0 = new_label () and label_end = new_label () in
      let cmp = generate_comparison_op cmp in
      emit_if_then_else cmp i.arg.(0) (Immediate n) label_1 (Some label_0);
      `{emit_label label_0}:\n`;
      `	movi	{emit_reg i.res.(0)}, 0\n`;
      `	j	{emit_label label_end}\n`;
      `{emit_label label_1}:\n`;
      `	movi	{emit_reg i.res.(0)}, 1\n`;
      `{emit_label label_end}:\n`;
    | Lop(Iintop (Icheckbound { label_after_error ; } )) ->
      emit_comment "Checkbound"; 
      let lbl = bound_error_label ?label:label_after_error i.dbg in
      emit_if_then_else (Cmp "bltu") i.arg.(0) (Register i.arg.(1)) lbl None 
    | Lop(Iintop_imm(Icheckbound { label_after_error; }, n)) ->
      emit_comment "Checkbound imm";
      let lbl = bound_error_label ?label:label_after_error i.dbg in 
      emit_if_then_else (Cmp "bltu") i.arg.(0) (Immediate n) lbl None 
    | Lop(Iintop op) ->
      emit_comment "Intop";
      let instr, sar = name_for_int_operation op in
      (match sar with 
      | true ->  emit_fill_shift_register i.arg.(1); `	{emit_string instr} 	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}\n`
      | false -> `	{emit_string instr} 	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_reg i.arg.(1)}\n`)
    | Lop(Iintop_imm(op, n)) -> 
      emit_comment "Intop_imm";
      let instr,_ = name_for_int_operation op in 
      `	{emit_string instr}i	{emit_reg i.res.(0)}, {emit_reg i.arg.(0)}, {emit_int n}\n`
    | Lop(Iabsf | Inegf as _op) -> assert false (* Implemented by runtime ABI call *)
    | Lop(Ifloatofint) -> assert false (* Implemented by runtime ABI call *)
    | Lop(Iintoffloat) -> assert false (* Implemented by runtime ABI call *)
    | Lop(Iaddf | Isubf | Imulf | Idivf as _op) -> assert false (* Implemented by runtime ABI call *)
    | Lop(Iname_for_debugger _) -> ``
    | Lop(Ispecific(_)) ->  ``
    | Lreloadretaddr -> 
      emit_comment "Reloadretaddr";
      let n = frame_size() in (* First local variable is saved return address. *)
      `	l32i	a0, sp, {emit_int(n-4)}\n`
    | Lreturn -> 
      emit_comment "Return";
      output_epilogue begin fun () -> `	ret\n` end
    | Llabel(label) -> 
      emit_comment "Label";
      emit_label label; `:\n`;
    | Lbranch(label) -> 
      emit_comment "Branch";
      `	j	{emit_label label}\n`; 
    | Lcondbranch(tst, lbl) -> 
      emit_comment "Condbranch";
      assert (Array.length i.arg >= 1);
      let cmp, op2 = match tst with
        | Itruetest -> (Cmp "bne", Immediate 0)
        | Ifalsetest -> (Cmp "beq", Immediate 0)
        | Iinttest cmp -> (generate_comparison_op cmp, Register i.arg.(1))
        | Iinttest_imm(cmp, n) ->  (generate_comparison_op cmp, Immediate n)
        | Ifloattest(_cmp, _neg) -> assert false
        | Ioddtest ->  (Cmp "bbs", Immediate 0)
        | Ieventest ->  (Cmp "bbc", Immediate 0)
      in 
      emit_if_then_else cmp i.arg.(0) op2 lbl None 
    | Lcondbranch3(br1, br2, br3) -> 
      emit_comment "Condbranch 3";
      assert (Array.length i.arg >= 1);
      let end_label = new_label () in 
      begin match br1 with
        None -> ()
      | Some lbl -> `	blti	{emit_reg i.arg.(0)}, 1, {emit_label lbl}\n`
      end;
      begin match br2 with
        None -> ()
      | Some lbl -> `	beqi	{emit_reg i.arg.(0)}, 1, {emit_label lbl}\n`
      end;
      begin match br3 with
        None -> ()
      | Some lbl -> 
        begin 
          `	blti	{emit_reg i.arg.(0)}, 1, {emit_label end_label}\n`;
          `	beqi	{emit_reg i.arg.(0)}, 1, {emit_label end_label}\n`;
          `	j	{emit_label lbl}\n`;
          emit_label end_label; `:\n`;
        end
      end;
    | Lswitch(jumptbl) -> 
      emit_comment "Switch"; 
      let switch_label = new_label () in
      let __switch_label = new_label () in
      `	slli	a3, {emit_reg i.arg.(0)}, 2\n`; (* Multiply switch dest by 4 *)
      `.literal	{emit_label __switch_label}, {emit_label switch_label}\n`;
      `	l32r	a2, {emit_label __switch_label}\n`; (* Load base address of labels *)
      `	add 	a2, a3, a2\n`; (* Add offset *)
      `	l32i	a2, a2, 0\n`; (* Load label address *)
      `	jx  	a2\n`; (* Jump to label *)
      `.section	.rodata\n`;
      `.align	4\n`;
      emit_label switch_label; `:\n`;
      for j = 0 to Array.length jumptbl - 1 do
        `	.word	{emit_label jumptbl.(j)}\n`
      done;
      `.section	.text\n`
    | Lsetuptrap(label) ->
      let veneer = new_label () in 
      emit_comment "Setup trap"; 
      `.literal	{emit_label veneer}, {emit_label label}\n`;
      `	l32r	a11, {emit_label veneer}\n`;
      `	callx0	a11\n`
    | Lpushtrap -> 
      emit_comment "Push trap";
      stack_offset := !stack_offset + 8;
      `	addi	sp, sp, -8\n`;
      `	ssi 	f0, sp, 0\n`; (* Store trap pointer *)
      `	s32i	a0, sp, 4\n`; (* Store return *)
      cfi_adjust_cfa_offset 8;
      `	wfr 	f0, sp\n`;  (* Save new trap pointer *)
    | Lpoptrap -> (* a0 is not popped back but it's okay because saved by setjmp *)
      emit_comment "Pop trap";
      `	lsi 	f0, sp, 0\n`; (* Load trap pointer *)
      `	l32i	a0, sp, 4\n`; (* Load return *)
      `	addi	sp, sp, 8\n`;
      cfi_adjust_cfa_offset (-8);
      stack_offset := !stack_offset - 8;
    | Lraise(kind) ->
      emit_comment "Raise"; 
      begin match kind with 
      | Cmm.Raise_withtrace -> 
        `{emit_call_to_OCaml "caml_raise_exn"}\n`;
        `{record_frame Reg.Set.empty true i.dbg}\n`
      | Cmm.Raise_notrace ->
        `	rfr 	sp, f0 \n`; (* Load trap pointer *)
        `	lsi 	f0, sp, 0\n`; (* Load previous trap pointer *)
        `	l32i	a0, sp, 4\n`; (* Load return address *)
        `	addi	sp, sp, 8\n`; (* Cut stack *)
        `	ret\n`; (* Jump to a0. *)
      end




let rec emit_all instr = match instr.desc with 
  | Lend -> () 
  | _ -> emit_instruction instr; emit_all instr.next 

let fundecl fundecl = 
  function_name := fundecl.fun_name;
  tailrec_entry_point := new_label();
  stack_offset := 0;
  call_gc_sites := [];
  bound_error_sites := [];
  pending_literals := [];
  pending_strings := [];
  `.text\n`;
  `.literal_position\n`;
  `.align	4\n`;
  `.global	{emit_symbol fundecl.fun_name}\n`;
  `.type	{emit_symbol fundecl.fun_name}, @function\n`;
  `{emit_symbol fundecl.fun_name}:\n`;
  cfi_startproc();
  let n = frame_size() in
  if n > 0 then begin
    ignore(emit_stack_adjustment (-n));
    if !contains_calls then begin
      cfi_offset ~reg:0 (* lr = a0 *) ~offset:(-4);
      `	s32i	a0, sp, {emit_int(n - 4)}\n`
    end
  end;
  `{emit_label !tailrec_entry_point}:\n`;
  emit_all fundecl.fun_body;
  flush_strings ();
  flush_literals ();
  List.iter emit_call_gc !call_gc_sites;
  List.iter emit_call_bound_error !bound_error_sites;
  cfi_endproc();
  ()


(* Emission of data *)

let emit_item = function
    Cglobal_symbol s -> `.globl	{emit_symbol s}\n`;
  | Cdefine_symbol s -> `{emit_symbol s}:\n`
  | Cint8 n ->  `	.byte	{emit_int n}\n`
  | Cint16 n -> `	.short	{emit_int n}\n`
  | Cint32 n -> `	.long	{emit_int32 (Nativeint.to_int32 n)}\n`
  | Cint n ->   `	.long	{emit_int32 (Nativeint.to_int32 n)}\n`
  | Csingle f -> emit_float32_directive "	.long	" (Int32.bits_of_float f)
  | Cdouble f -> emit_float64_split_directive "	.long	" (Int64.bits_of_float f)
  | Csymbol_address s -> `	.word	{emit_symbol s}\n`
  | Cstring s -> emit_string_directive "	.ascii	" s
  | Cskip n -> if n > 0 then `	.space	{emit_int n}\n`
  | Calign n -> `.align	{emit_int(Misc.log2 n)}\n`

let data l =
  `.data\n`;
  List.iter emit_item l


let begin_assembly() =
  let lbl_begin = Compilenv.make_symbol (Some "data_begin") in
  `.data\n`;
  `.globl	{emit_symbol lbl_begin}\n`;
  `{emit_symbol lbl_begin}:\n`;
  let lbl_begin = Compilenv.make_symbol (Some "code_begin") in
  `.text\n`;
  `.globl	{emit_symbol lbl_begin}\n`;
  `{emit_symbol lbl_begin}:\n`

let end_assembly () =
  let lbl_end = Compilenv.make_symbol (Some "code_end") in
  `.text\n`;
  `.globl	{emit_symbol lbl_end}\n`;
  `{emit_symbol lbl_end}:\n`;
  let lbl_end = Compilenv.make_symbol (Some "data_end") in
  `.data\n`;
  `.globl	{emit_symbol lbl_end}\n`;
  `{emit_symbol lbl_end}:\n`;
  `	.long	0\n`;
  let lbl = Compilenv.make_symbol (Some "frametable") in
  `.globl	{emit_symbol lbl}\n`;
  `.align	4\n`;
  `{emit_symbol lbl}:\n`;
  emit_frames
    { efa_code_label = (fun lbl ->
                       `	.type	{emit_label lbl}, %function\n`;
                       `	.word	{emit_label lbl}\n`);
      efa_data_label = (fun lbl ->
                       `	.type	{emit_label lbl}, %object\n`;
                       `	.word	{emit_label lbl}\n`);
      efa_16 = (fun n -> `	.short	{emit_int n}\n`);
      efa_32 = (fun n -> `	.long	{emit_int32 n}\n`);
      efa_word = (fun n -> `	.word	{emit_int n}\n`);
      efa_align = (fun n -> `	.align	{emit_int(Misc.log2 n)}\n`);
      efa_label_rel = (fun lbl ofs ->
                           `	.word	{emit_label lbl} - . + {emit_int32 ofs}\n`);
      efa_def_label = (fun lbl -> `{emit_label lbl}:\n`);
      efa_string = (fun s -> emit_string_directive "	.asciz	" s) };
  `	.type	{emit_symbol lbl}, %object\n`;
  `	.size	{emit_symbol lbl}, .-{emit_symbol lbl}\n`;
